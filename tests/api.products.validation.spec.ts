import { test, expect } from '@playwright/test'

// Use pre-authenticated admin storage state generated by setup project
test.use({ storageState: 'playwright/.auth/admin.json' })

test('POST /api/products returns 400 for invalid payload', async ({ page }) => {
  // Missing required fields
  const r1 = await page.request.post('/api/products', { data: { name: '', priceCents: -1 } })
  expect(r1.status()).toBe(400)
  const j1 = await r1.json()
  expect(j1?.error?.message).toBeTruthy()

  const r2 = await page.request.post('/api/products', { data: { name: 'X', sku: '', priceCents: 100, stock: -5 } })
  expect(r2.status()).toBe(400)
})

test('PATCH /api/products/:id returns 400 for empty or invalid payload', async ({ page }) => {
  // Create a valid product first
  const created = await page.request.post('/api/products', { data: { name: 'Valid', sku: 'SKU1', priceCents: 123, stock: 10 } })
  expect(created.status()).toBe(200)
  const product = await created.json()
  const id = product?.product?.id
  expect(id).toBeTruthy()

  // Empty update
  const r1 = await page.request.patch(`/api/products/${id}`, { data: {} })
  expect(r1.status()).toBe(400)
  // Invalid
  const r2 = await page.request.patch(`/api/products/${id}`, { data: { priceCents: -100 } })
  expect(r2.status()).toBe(400)
})
